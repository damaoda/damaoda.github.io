<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>笔记 on 匿名用户李大毛</title>
    <link>https://lemontree152.github.io/posts/</link>
    <description>Recent content in 笔记 on 匿名用户李大毛</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 02 Mar 2017 12:00:00 -0500</lastBuildDate><atom:link href="https://lemontree152.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Chapter I: The Grand Hall</title>
      <link>https://lemontree152.github.io/posts/chapter-1/</link>
      <pubDate>Sun, 09 Apr 2017 10:58:08 -0400</pubDate>
      
      <guid>https://lemontree152.github.io/posts/chapter-1/</guid>
      <description>Three hundred and forty-eight years, six months, and nineteen days ago to-day, the Parisians awoke to the sound of all the bells in the triple circuit of the city, the university, and the town ringing a full peal.
The sixth of January, 1482, is not, however, a day of which history has preserved the memory. There was nothing notable in the event which thus set the bells and the bourgeois of Paris in a ferment from early morning.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://lemontree152.github.io/posts/uml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lemontree152.github.io/posts/uml/</guid>
      <description>UML类图学习小结 前言  统一建模语言（Unified Modeling Language, UML)，可以帮助开发者对软件设计进行敏捷的思考（Agile thinking in UML）。针对一个复杂的软件设计问题，在编码之前首先明确需求，进而利用各种模型、方法论在大脑中进行深度思考和建模，最后评估方案的可行性和有效性，衡量各种可选方案的利弊。做到胸有成竹之后才动手，编程效率和质量都会较高，这个过程就是专家们常说的Quality Before Code。UML是思考和建模中有效的工具。UML能够帮助你对软件架构和设计模式进行抽象、全面、敏捷地分析和思考。UML能够帮助你快速、形象、牢固地记忆设计模式和方案。UML能够帮助你直观、形象、准确地与队友沟通、探讨软件设计。最后，画UML图是阅读、理解、学习源码的高效手段。
 UML类图基本结构 类图是用来表示系统中类集合、类的属性以及类之间关系的一种静态结构图。在UML类图中，一个类用一个划分为三个部分的矩形表示，从上到下依次是类名、属性以及方法。例如，一个Person类有name和age两个属性，以及相应的get和set方法。Java代码和UML类图分别如下所示。
import java.util.*; public class Person { private String name = zhangsan; private int age = 23; public String getName() { return name; } public void setName(String newName) { name = newName; } public int getAge() { return age; } public void setAge(int newAge) { age = newAge; } } 第一部分：类名 Java类的名字，若类名是正体书写，说明这是可以实例化的普通类；若是抽象类，则用斜体书写，且会在右下角显示{abstract}；若是接口，则用下划线修饰类名。 第二部分：属性 Java类中的属性也叫成员变量，在UML中其可见性、类型和默认值的通用表现形式为：
可见性 属性名称：类型 [ = 默认值]</description>
    </item>
    
  </channel>
</rss>
